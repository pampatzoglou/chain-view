# Default values for chain-view.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

metrics:
  podMonitor:
    enabled: false
    namespace: ""
    jobLabel: ""
    interval: 30s
    scrapeTimeout: ""
    honorLabels: false
    labels:
      release: prometheus
  serviceMonitor:
    enabled: false
    namespace: ""
    jobLabel: ""
    interval: 30s
    scrapeTimeout: ""
    honorLabels: false
    labels:
      release: prometheus
  prometheusRule:
    enabled: false
    namespace: ""
    additionalLabels:
      release: prometheus
    rules: []

rbac:
  create: false
  rules: []

networkPolicy:
  enabled: false
  metrics:
    enabled: false
    selector: {}
  ingressRules:
    enabled: false
    selector: {}
    customRules: []

config:
  existingSecret: ""
  server:
    port: 9000
    logging:
      level: "debug"  # Options: debug, info, warn, error
    database:
      url: "postgres://postgres:postgres@chain-view-postgresql:5432/chain-view"
      maxConnections: 4
      maxQueueTime: 1s
      minConnections: 3
      healthCheckPeriod: 10s
      maxConnIdleTime: 5s
      healthCheckTimeout: 5s
      maxConnWaitTimeout: 5s
    redis:
      url: "redis://localhost:6379"
  chains:
    ethereum:
      chain_id: 1
      network: mainnet
      endpoints:
        - name: infura
          url: https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID
          api_key: YOUR_INFURA_API_KEY
          timeout: 3s
      pooling_strategy: round_robin
      retry_count: 3
      retry_backoff: 2s

    polygon:
      chain_id: 137
      network: mainnet
      endpoints:
        - name: infura
          url: https://polygon-mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID
          api_key: YOUR_INFURA_API_KEY
          timeout: 3s
      pooling_strategy: fastest
      retry_count: 2
      retry_backoff: 1s

    binance_smart_chain:
      chain_id: 56
      network: mainnet
      endpoints:
        - name: binance_rpc
          url: https://bsc-dataseed.binance.org/
          timeout: 3s
      pooling_strategy: retry_with_next
      retry_count: 4
      retry_backoff: 3s

    avalanche:
      chain_id: 43114
      network: mainnet
      endpoints:
        - name: avax_infura
          url: https://avalanche-mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID
          api_key: YOUR_INFURA_API_KEY
          timeout: 3s
      pooling_strategy: round_robin
      retry_count: 3
      retry_backoff: 1.5s

  global_settings:
    request_timeout: 10s     # Default request timeout for all chains
    max_retries: 5           # Default maximum retries for any request
    retry_backoff: 2s        # Default backoff time between retries
